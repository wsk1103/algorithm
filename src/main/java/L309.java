/**
 * @author sk
 * @time 2022/9/16
 * @desc say
 **/
public class L309 {

    /*
     * //给定一个整数数组
     * // prices，其中第 prices[i] 表示第 i 天的股票价格 。
     * //
     * // 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
     * //
     * //
     * // 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
     * //
     * //
     * // 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
     * //
     * //
     * //
     * // 示例 1:
     * //
     * //
     * //输入: prices = [1,2,3,0,2]
     * //输出: 3
     * //解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
     * //
     * // 示例 2:
     * //
     * //
     * //输入: prices = [1]
     * //输出: 0
     * //
     * //
     * //
     * //
     * // 提示：
     * //
     * //
     * // 1 <= prices.length <= 5000
     * // 0 <= prices[i] <= 1000
     * //
     * //
     * // Related Topics 数组 动态规划 👍 1319 👎 0
     */

    /**
     * 对于每一天操作后：有3种状态
     * <p>
     * 持有股票(f0)
     * 卖出股票后处于冷冻期(f1)
     * 既不持有也不冷冻(f2)
     * 我们可以使用3个变量来存储每一天操作后这三种状态的最大收益。
     * <p>
     * 持有股票的最大收益：
     * 前一天持有，今天继续持有。最大收益=f0
     * 前一天处于第三种情况，今天刚持有。最大收益 = f2-prices[i]
     * 卖出股票后处于冷冻期
     * 前一天持有，今天卖出。最大收益=f0+prices[i]
     * 既不持有，也不冷冻
     * 昨天操作后是冷冻期，那么今天操作后，就不冷冻了。最大收益 = f1
     * 昨天既不冷冻，也不持有。那么今天继续不持有。最大收益 = f2
     * <p>
     * 执行耗时:0 ms,击败了100.00% 的Java用户
     * 内存消耗:39.7 MB,击败了58.43% 的Java用户
     *
     * @param prices
     * @return
     */
    public static int handle(int[] prices) {
        int len = prices.length;
        int f0 = -prices[0];
        int f1 = 0;
        int f2 = 0;
        for (int i = 1; i < len; i++) {
            int cur0 = Math.max(f0, f2 - prices[i]);
            int cur1 = f0 + prices[i];
            int cur2 = Math.max(f1, f2);
            f0 = cur0;
            f1 = cur1;
            f2 = cur2;
        }
        return Math.max(f1, f2);
    }

}
