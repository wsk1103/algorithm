import java.util.*;

/**
 * @author sk
 * @time 2021/11/25
 * @desc say
 **/
public class L93_873 {

    /*
     * 如果序列 X_1, X_2, ..., X_n 满足下列条件，就说它是 斐波那契式 的：
     *
     * n >= 3
     * 对于所有 i + 2 <= n，都有 X_i + X_{i+1} = X_{i+2}
     * 给定一个严格递增的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。
     *
     * （回想一下，子序列是从原序列  arr 中派生出来的，它从 arr 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3, 5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）
     *
     *
     *
     * 示例 1：
     *
     * 输入: arr = [1,2,3,4,5,6,7,8]
     * 输出: 5
     * 解释: 最长的斐波那契式子序列为 [1,2,3,5,8] 。
     * 示例 2：
     *
     * 输入: arr = [1,3,7,11,12,14,18]
     * 输出: 3
     * 解释: 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。
     *
     *
     * 提示：
     *
     * 3 <= arr.length <= 1000
     * 1 <= arr[i] < arr[i + 1] <= 10^9
     */

    public static int handle(int[] arr) {
        //g(n) = 当前数值可构成的最长斐波那契式
        //f(n) = max(f(n-1),g(n))

        int to = ha(arr);
        return to;
    }

    public static int handle2(int[] arr) {
        int size = 0;
        Map<Integer, Integer> map = new HashMap<>(arr.length);
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], i);
        }
        int l = arr.length;
        Map<Integer, Integer> dp = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                int cc = map.getOrDefault(arr[i] - arr[j], -1);
                if (cc >= 0 && cc < j) {
                    int ccc = dp.getOrDefault(cc * l + j, 2) + 1;
                    dp.put(j * l + i, ccc);
                    size = Math.max(size, ccc);
                }
            }
        }
        return size > 2 ? size : 0;
    }

    public static int handle3(int[] arr) {
        HashSet<Integer> set = new HashSet<>();
        for (int k : arr) {
            set.add(k);
        }
        int result = 0;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                int len = 2;
                int x = arr[i];
                int y = arr[j];
                while (set.contains(x + y)) {
                    int temp = x + y;
                    x = y;
                    y = temp;
                    len++;
                }
                result = Math.max(result, len);
            }
        }
        return result <= 2 ? 0 : result;
    }

    public static int ha(int[] arr) {
        Map<Integer, List<List<Integer>>> map = new HashMap<>();
        int size = 0;
        for (int i = 2; i < arr.length; i++) {
            if (size <= 3) {
                List<List<Integer>> ll = map.get(3);
                if (ll != null) {
                    int j = 0;
                    boolean find = false;
                    for (; j < ll.size(); j++) {
                        List<Integer> temp = ll.get(j);
                        if (arr[i] == temp.get(temp.size() - 1) + temp.get(temp.size() - 2)) {
                            temp.add(arr[i]);
                            find = true;
                            break;
                        }
                    }
                    if (find) {
                        List<Integer> temp = ll.get(j);
                        List<List<Integer>> mt = new ArrayList<>();
                        mt.add(temp);
                        size = 3;
                        map.put(++size, mt);
                        ll.remove(j);
                        continue;
                    }
                }
                for (int j = i - 1; j >= 0; j--) {
                    int target = arr[i] - arr[j];
                    int r = find(arr, 0, j - 1, target);
                    if (r != -1) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(arr[r]);
                        temp.add(arr[j]);
                        temp.add(arr[i]);
                        List<List<Integer>> list = map.get(3);
                        boolean isN = false;
                        if (list == null) {
                            isN = true;
                            list = new ArrayList<>();
                        }
                        list.add(temp);
                        if (isN) {
                            map.put(3, list);
                        }
                        size = 3;
                        break;
                    }
                }
            } else {
                List<List<Integer>> list = map.get(size);
                List<List<Integer>> list2 = map.get(size - 1);
                if (list != null) {
                    int j = 0;
                    boolean find = false;
                    for (; j < list.size(); j++) {
                        List<Integer> temp = list.get(j);
                        if (arr[i] == temp.get(temp.size() - 1) + temp.get(temp.size() - 2)) {
                            temp.add(arr[i]);
                            find = true;
                            break;
                        }
                    }
                    if (find) {
                        List<Integer> temp = list.get(j);
                        List<List<Integer>> mt = new ArrayList<>();
                        mt.add(temp);
                        map.put(++size, mt);
                        list.remove(j);
                        continue;
                    }
                }
                if (list2 != null) {
                    int j = 0;
                    boolean find = false;
                    for (; j < list2.size(); j++) {
                        List<Integer> temp = list2.get(j);
                        if (arr[i] == temp.get(temp.size() - 1) + temp.get(temp.size() - 2)) {
                            temp.add(arr[i]);
                            find = true;
                            break;
                        }
                    }
                    if (find) {
                        List<Integer> temp = list2.get(j);
                        List<List<Integer>> mt = map.get(size);
                        boolean isN = false;
                        if (mt == null) {
                            mt = new ArrayList<>();
                            isN = true;
                        }
                        mt.add(temp);
                        if (isN) {
                            map.put(size, mt);
                        }
                        list2.remove(j);
                        continue;
                    }
                }
            }
        }
        return size;
    }

    public static int find(int[] arr, int start, int end, int target) {
        while (start <= end) {
            int mid = ((end - start) >> 1) + start;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int[] arr;
        arr = new int[]{1, 2, 3, 4, 5};
        System.err.println(handle2(arr));
        System.err.println(handle3(arr));
        arr = new int[]{1, 2, 3, 4, 5, 6, 7, 8};
        System.err.println(handle2(arr));
        System.err.println(handle3(arr));
        arr = new int[1000];
        arr[0] = 1;
        for (int i = 1; i < 1000; i++) {
            arr[i] = arr[i - 1] + 1;
        }
        System.err.println(handle2(arr));
        System.err.println(handle3(arr));
        arr = new int[]{94, 167, 249, 296, 327, 354, 394, 423, 442, 477, 542, 578, 626, 712, 791, 857, 946, 979, 998, 1060, 1131, 1137, 1200, 1250, 1274, 1330, 1346, 1407, 1441, 1462, 1467, 1552, 1562, 1597, 1626, 1724, 1801, 1865, 1870, 1904, 1933, 1968, 1993, 2055, 2076, 2176, 2197, 2247, 2345, 2377, 2387, 2405, 2455, 2506, 2537, 2541, 2599, 2630, 2687, 2753, 2821, 2891, 2917, 2921, 2978, 2989, 3002, 3005, 3078, 3124, 3192, 3247, 3304, 3402, 3498, 3517, 3534, 3583, 3601, 3683, 3741, 3764, 3771, 3816, 3916, 3955, 3989, 4073, 4102, 4186, 4216, 4295, 4375, 4402, 4473, 4548, 4612, 4655, 4689, 4762, 4809, 4903, 4923, 4962, 4970, 4972, 4988, 5053, 5149, 5205, 5274, 5366, 5465, 5509, 5545, 5608, 5663, 5738, 5778, 5792, 5877, 5892, 5951, 5967, 6051, 6108, 6188, 6204, 6250, 6303, 6402, 6434, 6441, 6532, 6621, 6640, 6701, 6774, 6777, 6850, 6917, 7015, 7101, 7106, 7204, 7245, 7296, 7372, 7445, 7536, 7541, 7574, 7587, 7590, 7606, 7635, 7636, 7660, 7714, 7793, 7838, 7868, 7877, 7897, 7978, 8023, 8067, 8081, 8150, 8218, 8276, 8348, 8436, 8450, 8519, 8579, 8664, 8691, 8776, 8788, 8832, 8913, 8963, 8969, 9011, 9029, 9129, 9155, 9222, 9228, 9240, 9270, 9279, 9326, 9342, 9363, 9456, 9509, 9604, 9633, 9668, 9699, 9799, 9836, 9864, 9948, 10023, 10082, 10106, 10169, 10175, 10274, 10344, 10396, 10445, 10521, 10564, 10566, 10630, 10637, 10703, 10745, 10807, 10854, 10933, 10987, 11026, 11078, 11158, 11181, 11217, 11233, 11241, 11255, 11319, 11411, 11458, 11523, 11582, 11645, 11711, 11762, 11787, 11789, 11878, 11911, 11944, 11964, 11993, 12054, 12074, 12127, 12138, 12235, 12312, 12314, 12340, 12424, 12496, 12548, 12584, 12633, 12680, 12751, 12847, 12924, 13005, 13086, 13088, 13104, 13145, 13173, 13201, 13217, 13241, 13257, 13313, 13323, 13366, 13460, 13479, 13536, 13567, 13641, 13669, 13670, 13770, 13783, 13794, 13871, 13904, 13972, 14050, 14100, 14126, 14147, 14225, 14273, 14313, 14321, 14384, 14410, 14416, 14425, 14470, 14483, 14500, 14553, 14568, 14590, 14643, 14700, 14746, 14757, 14764, 14832, 14902, 14915, 14970, 14980, 15030, 15034, 15089, 15119, 15129, 15216, 15259, 15342, 15364, 15370, 15439, 15504, 15571, 15633, 15662, 15741, 15783, 15839, 15936, 15969, 16010, 16036, 16130, 16197, 16282, 16345, 16403, 16445, 16459, 16509, 16596, 16597, 16635, 16710, 16740, 16742, 16794, 16812, 16873, 16877, 16902, 16943, 17022, 17079, 17158, 17250, 17284, 17337, 17371, 17439, 17502, 17594, 17610, 17631, 17677, 17714, 17731, 17764, 17837, 17917, 17995, 17998, 18092, 18176, 18271, 18360, 18393, 18475, 18484, 18563, 18636, 18673, 18740, 18759, 18823, 18886, 18959, 18992, 19061, 19097, 19151, 19171, 19188, 19258, 19273, 19281, 19315, 19333, 19402, 19459, 19511, 19597, 19697, 19750, 19756, 19757, 19764, 19821, 19879, 19886, 19945, 20029, 20066, 20152, 20227, 20309, 20351, 20373, 20468, 20501, 20528, 20544, 20581, 20671, 20692, 20752, 20794, 20884, 20961, 21053, 21143, 21194, 21244, 21265, 21323, 21418, 21421, 21433, 21528, 21529, 21556, 21574, 21629, 21657, 21756, 21806, 21832, 21836, 21922, 21998, 22029, 22107, 22182, 22214, 22266, 22358, 22454, 22482, 22507, 22570, 22589, 22625, 22716, 22783, 22824, 22880, 22906, 22999, 23010, 23057, 23138, 23177, 23190, 23276, 23326, 23358, 23373, 23451, 23494, 23576, 23676, 23725, 23788, 23806, 23887, 23892, 23931, 23971, 24009, 24057, 24145, 24157, 24249, 24306, 24395, 24420, 24507, 24549, 24603, 24647, 24663, 24727, 24804, 24808, 24895, 24974, 25040, 25106, 25185, 25207, 25282, 25310, 25385, 25416, 25441, 25522, 25579, 25642, 25711, 25787, 25833, 25864, 25883, 25900, 25905, 25997, 26057, 26081, 26158, 26171, 26211, 26302, 26391, 26458, 26476, 26557, 26596, 26649, 26706, 26756, 26841, 26846, 26879, 26929, 26997, 27052, 27107, 27117, 27197, 27199, 27253, 27350, 27436, 27509, 27550, 27638, 27679, 27708, 27743, 27837, 27859, 27891, 27969, 28044, 28063, 28068, 28153, 28229, 28276, 28328, 28421, 28443, 28487, 28571, 28577, 28617, 28684, 28710, 28745, 28814, 28815, 28860, 28947, 29026, 29110, 29185, 29257, 29324, 29336, 29371, 29381, 29454, 29522, 29585, 29679, 29722, 29810, 29900, 29953, 29999, 30087, 30167, 30187, 30252, 30301, 30384, 30417, 30499, 30563, 30638, 30729, 30772, 30797, 30857, 30861, 30911, 30924, 30927, 30939, 31021, 31040, 31119, 31185, 31255, 31320, 31355, 31422, 31469, 31547, 31645, 31728, 31770, 31780, 31810, 31818, 31846, 31876, 31937, 31984, 32076, 32099, 32197, 32219, 32222, 32284, 32341, 32361, 32431, 32519, 32590, 32689, 32724, 32752, 32789, 32820, 32833, 32839, 32913, 32925, 33025, 33046, 33122, 33177, 33191, 33212, 33300, 33347, 33348, 33413, 33424, 33463, 33516, 33519, 33614, 33697, 33791, 33869, 33939, 33975, 33985, 34052, 34098, 34100, 34193, 34199, 34295, 34395, 34458, 34537, 34627, 34670, 34743, 34838, 34887, 34946, 35027, 35067, 35111, 35183, 35191, 35273, 35362, 35444, 35503, 35580, 35630, 35698, 35756, 35760, 35844, 35931, 36011, 36075, 36162, 36251, 36308, 36366, 36427, 36497, 36587, 36658, 36688, 36695, 36734, 36792, 36872, 36954, 37013, 37101, 37122, 37200, 37236, 37243, 37317, 37345, 37425, 37478, 37546, 37578, 37676, 37757, 37791, 37864, 37879, 37891, 37952, 38008, 38041, 38123, 38151, 38171, 38217, 38313, 38387, 38447, 38464, 38533, 38604, 38650, 38673, 38698, 38714, 38757, 38834, 38848, 38907, 38931, 39025, 39072, 39111, 39162, 39190, 39270, 39283, 39355, 39397, 39432, 39457, 39516, 39609, 39694, 39778, 39873, 39926, 40010, 40028, 40106, 40174, 40179, 40198, 40265, 40307, 40326, 40389, 40443, 40519, 40593, 40609, 40699, 40798, 40893, 40922, 40923, 41015, 41076, 41121, 41134, 41164, 41241, 41253, 41307, 41327, 41422, 41452, 41506, 41604, 41680, 41702, 41786, 41812, 41828, 41899, 41993, 42022, 42051, 42054, 42072, 42156, 42247, 42251, 42322, 42346, 42386, 42467, 42516, 42558, 42654, 42715, 42794, 42858, 42895, 42958, 43024, 43026, 43030, 43072, 43134, 43163, 43251, 43274, 43370, 43376, 43400, 43421, 43476, 43482, 43547, 43624, 43689, 43690, 43728, 43732, 43779, 43824, 43915, 43954, 44035, 44074, 44152, 44202, 44293, 44367, 44423, 44483, 44576, 44648, 44697, 44744, 44794, 44855, 44942, 44985, 44990, 45051, 45060, 45138, 45219, 45293, 45390, 45414, 45496, 45592, 45598, 45670, 45687, 45709, 45713, 45720, 45752, 45791, 45848, 45899, 45999, 46084, 46158, 46179, 46255, 46280, 46297, 46367, 46430, 46526, 46556, 46632, 46719, 46760, 46793, 46890, 46931, 46984, 47049, 47057, 47154, 47163, 47186, 47225, 47278, 47285, 47376, 47389, 47439, 47499, 47559, 47605, 47673, 47762, 47785, 47826, 47882, 47971, 47972, 48010, 48034, 48078, 48083, 48092, 48098, 48104, 48126, 48181, 48243, 48282, 48305, 48346, 48396, 48418, 48512, 48598, 48610, 48638, 48697, 48699, 48766, 48771, 48791, 48800, 48807, 48849, 48895, 48928, 49027, 49060, 49135, 49207, 49269, 49311, 49319, 49345, 49383, 49402, 49413, 49489, 49537, 49601, 49679, 49770, 49814, 49843, 49912, 49956};
//		System.err.println(JSON.toJSONString(arr));
        System.err.println(handle2(arr));
        System.err.println(handle3(arr));
    }

}
