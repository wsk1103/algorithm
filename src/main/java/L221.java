/**
 * @author sk
 * @time 2022/8/31
 * @desc say
 **/
public class L221 {

    /*
     * //在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。
     * //
     * //
     * //
     * // 示例 1：
     * //
     * //
     * //输入：matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"]
     * //,["1","0","0","1","0"]]
     * //输出：4
     * //
     * //
     * // 示例 2：
     * //
     * //
     * //输入：matrix = [["0","1"],["1","0"]]
     * //输出：1
     * //
     * //
     * // 示例 3：
     * //
     * //
     * //输入：matrix = [["0"]]
     * //输出：0
     * //
     * //
     * //
     * //
     * // 提示：
     * //
     * //
     * // m == matrix.length
     * // n == matrix[i].length
     * // 1 <= m, n <= 300
     * // matrix[i][j] 为 '0' 或 '1'
     * //
     * //
     * // Related Topics 数组 动态规划 矩阵 👍 1249 👎 0
     */

    /**
     * 该题有些技巧，使用DP的方法解题。
     * <p>
     * 所有由1组成的正方形，它的右下角一定是1；
     * 假设最大正方形的右下角坐标为(i, j)（下面简称以(i, j)为右下角的最大正方形为(i, j)），那么：
     * (i - 1, j) 也一定是一个正方形，并且其边长 = len(i, j) - 1；
     * (i, j - 1)也一定是一个正方形，并且其边长 = len(i, j) - 1；
     * (i - 1, j - 1)也一定是一个正方形，并且其边长 = len(i, j) - 1;
     * 若以上3种正方形的边长都为a，len(i, j) = a + 1；若以上边长分别为a,b,c，则len(i, j) = min(a, b, c) + 1。
     * 因为如果取最大值，则有可能正方形的三个角会缺一个角，则不能构成正方形；
     * 若当前值为0,则不构成正方形，边长则为0；
     * <p>
     * 执行耗时:6 ms,击败了79.65% 的Java用户
     * 内存消耗:52.3 MB,击败了89.74% 的Java用户
     *
     * @param matrix
     * @return
     */
    public static int handle(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int len = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1;
                    }
                    len = Math.max(len, dp[i][j]);
                }
            }
        }
        return len * len;
    }

}
